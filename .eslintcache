[{"/home/distant/projects_new/learning/src/index.js":"1","/home/distant/projects_new/learning/src/app.js":"2","/home/distant/projects_new/learning/src/searchModal.js":"3"},{"size":1084,"mtime":1609906633147,"results":"4","hashOfConfig":"5"},{"size":11266,"mtime":1610243725440,"results":"6","hashOfConfig":"5"},{"size":5398,"mtime":1609813832566,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zko260",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/distant/projects_new/learning/src/index.js",[],"/home/distant/projects_new/learning/src/app.js",[],"/home/distant/projects_new/learning/src/searchModal.js",["15","16"],"import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\nimport * as JsSearch from 'js-search';\n\nexport default class PlayerSearchModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        searchList: this.props.searchList,\n        searchTerm: \"\",\n        resultList: [],\n        renderList: [],\n        search: new JsSearch.Search('name'),\n        activePlayer: {},\n        activeElement: {},\n        };\n        this.state.search.addIndex(\"name\")\n        this.state.search.addDocuments(this.state.searchList)\n    }\n\n    handleChange = (e) => {\n        let { name, value } = e.target;\n        this.setState({searchTerm: value});\n        this.searchThings(value)\n    };\n\n    searchThings = (a) => {\n        let result = this.state.search.search(a)\n        console.log(result);\n        this.setState({resultList: result, renderList: this.handleResults(result)})\n    }\n\n    playerSelect = (e) => {\n        console.log(e.target.id)\n        let test = e.target.id.valueOf()\n        e.target.className = (e.target.className.includes(\"selected\")) ? \"my-centered-text search-results-item\" : ( \"selected \" + e.target.className );\n        this.setState({activePlayer: this.state.resultList[test], activeElement: e})\n    }\n\n    handleResults = (response) => {\n        let flag = typeof(response)\n        let temp = [];\n        if (flag === \"object\"){\n            if (Array.isArray(flag)){\n                console.log(\"ARRAY???\")\n            } else {\n                console.log(\"dict\")\n                temp.push(\n                    <div className=\"modal-results-list\">\n                        {\n                            Object.keys(response).map((key, entry) => {\n                                return (\n                                    <p id={\"\" + key} onClick={(e) => this.playerSelect(e)} className=\"my-centered-text search-results-item\">{response[entry][\"name\"]}</p>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            }\n        }\n        return temp\n    }\n\n    isEmpty = (obj) => {\n        if (typeof obj === \"undefined\"){\n            return true\n        }\n        return Object.keys(obj).length === 0;\n    }\n\n    makePlayerArea = () => {\n        if (!this.isEmpty(this.state.activePlayer)){\n            let pname = this.state.activePlayer[\"name\"]\n            let pdict = this.state.activePlayer\n            return (\n                <div className=\"selected-player-area\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h3 className=\"card-title\">{pname}</h3>\n                            <h5 className=\"card-sub-title mb-2 text-muted\">Flight Time: {pdict[\"SeatTime\"]}</h5>\n                            <div className=\"card-section\">\n                                <div className=\"row row-cols-3\">\n                                    <div className=\"col stat\">\n                                        <span><b>Air Kills: </b>{pdict[\"Air Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Deaths: </b>{pdict[\"Deaths\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">   \n                                        <span><b>Kill/Death Ratio: </b>{pdict[\"KtoDr\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Ground Kills: </b>{pdict[\"Unit Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Building Kills: </b>{pdict[\"Building Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Ejections: </b>{pdict[\"Ejections\"]}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        const { toggle } = this.props;\n        return (\n        <Modal isOpen={true} toggle={toggle} className=\"modal-player-window\">\n            <ModalHeader toggle={toggle}> Player Search </ModalHeader>\n            <ModalBody className=\"modal-search-body\">\n                <Form>\n                    <FormGroup>\n                        <Label for=\"search-bar\">Search: </Label>\n                        <Input\n                            type=\"text\"\n                            autoComplete=\"off\"\n                            name=\"search-bar\"\n                            onKeyUp={this.handleChange}\n                            placeholder=\"Enter Player Name\"\n                        />\n                    </FormGroup>\n                </Form>\n            <div>{this.state.renderList}</div>\n            </ModalBody>\n            <ModalFooter>\n                {this.makePlayerArea()}\n            </ModalFooter>\n        </Modal>\n        );\n    }\n}",{"ruleId":"17","severity":1,"message":"18","line":3,"column":5,"nodeType":"19","messageId":"20","endLine":3,"endColumn":11},{"ruleId":"17","severity":1,"message":"21","line":32,"column":15,"nodeType":"19","messageId":"20","endLine":32,"endColumn":19},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used."]