{"version":3,"sources":["containers/modals/SearchModal.js","components/titlebar/TitleBar.js","components/flightdata/FlightData.js","components/nivo/respbubble/MyResponsiveBubble.js","containers/maindisplay/MainDisplay.js","app.js","index.js"],"names":["PlayerSearchModal","props","handleChange","e","value","target","setState","searchTerm","searchThings","a","result","state","search","console","log","resultList","renderList","handleResults","playerSelect","id","test","valueOf","className","Object","keys","activeElement","length","classList","remove","activePlayer","response","flag","temp","Array","isArray","push","map","key","entry","onClick","isEmpty","obj","makePlayerArea","pname","pdict","searchList","JsSearch","addIndex","addDocuments","toggle","this","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","autoComplete","name","onKeyUp","placeholder","ModalFooter","Component","pageTitleBar","UncontrolledButtonDropdown","DropdownToggle","caret","size","dataSet","DropdownMenu","DropdownItem","header","disabled","togglePappa","toggleSierra","divider","toggleAlpha","makeFlightData","ret","dataDump","forEach","_","Card","CardBody","Row","Col","toFixed","myResponsiveBubbleHtml","d","data","root","margin","top","right","bottom","left","identity","colors","scheme","chartCircleColors","colorBy","chartCircleColorBy","padding","labelTextColor","from","modifiers","borderWidth","borderColor","defs","background","color","rotation","lineWidth","spacing","fill","chartCircleLines","match","depth","animate","motionStiffness","motionDamping","colorSchemes","data_sources","Alpha_Dump","Papa_Dump","Sierra_Dump","App","modal","digest","PlayerScores","formatted","giveBlueBaseStrength","baseDict","formatedBaseList","unitList","unorderedUnitList","amt","children","replacement","chartMotionDamp","mainDataChart","giveBaseFuel","bFuel","amount","charCircleColors","orderByKills","sort","b","orderByKDR","orderByDeaths","orderByTime","toggleDataTypes","render","TitleBar","bind","md","Container","MyResponsiveBubble","class","FlightData","onSave","handleSubmit","searchModal","playerDump","fuelDataJSON","nivoFuel","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdb7007e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\nimport * as JsSearch from 'js-search';\n\nexport default class PlayerSearchModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        searchList: this.props.searchList,\n        searchTerm: \"\",\n        resultList: [],\n        renderList: [],\n        search: new JsSearch.Search('name'),\n        activePlayer: {},\n        activeElement: {},\n        };\n        this.state.search.addIndex(\"name\")\n        this.state.search.addDocuments(this.state.searchList)\n    }\n\n    handleChange = (e) => {\n        let { value } = e.target;\n        this.setState({searchTerm: value});\n        this.searchThings(value)\n    };\n\n    searchThings = (a) => {\n        let result = this.state.search.search(a)\n        console.log(result);\n        this.setState({resultList: result, renderList: this.handleResults(result)})\n    }\n\n    playerSelect = (e) => {\n        console.log(e.target.id)\n        let test = e.target.id.valueOf()\n        e.target.className = (\"selected \" + e.target.className );\n        if (Object.keys(this.state.activeElement).length > 0) {\n            this.state.activeElement.classList.remove(\"selected\");\n        }\n        this.setState({activePlayer: this.state.resultList[test], activeElement: e.target})\n    }\n\n    handleResults = (response) => {\n        let flag = typeof(response)\n        let temp = [];\n        if (flag === \"object\"){\n            if (Array.isArray(flag)){\n                console.log(\"ARRAY???\")\n            } else {\n                console.log(\"dict\")\n                temp.push(\n                    <div className=\"modal-results-list\">\n                        {\n                            Object.keys(response).map((key, entry) => {\n                                return (\n                                    <p id={\"\" + key} onClick={(e) => this.playerSelect(e)} className=\"my-centered-text search-results-item\">{response[entry][\"name\"]}</p>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            }\n        }\n        return temp\n    }\n\n    isEmpty = (obj) => {\n        if (typeof obj === \"undefined\"){\n            return true\n        }\n        return Object.keys(obj).length === 0;\n    }\n\n    makePlayerArea = () => {\n        if (!this.isEmpty(this.state.activePlayer)){\n            let pname = this.state.activePlayer[\"name\"]\n            let pdict = this.state.activePlayer\n            return (\n                <div className=\"selected-player-area\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h3 className=\"card-title\">{pname}</h3>\n                            <h5 className=\"card-sub-title mb-2 text-muted\">Flight Time: {pdict[\"SeatTime\"]}</h5>\n                            <div className=\"card-section\">\n                                <div className=\"row row-cols-3\">\n                                    <div className=\"col stat\">\n                                        <span><b>Air Kills: </b>{pdict[\"Air Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Deaths: </b>{pdict[\"Deaths\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">   \n                                        <span><b>Kill/Death Ratio: </b>{pdict[\"KtoDr\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Ground Kills: </b>{pdict[\"Unit Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Building Kills: </b>{pdict[\"Building Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Ejections: </b>{pdict[\"Ejections\"]}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        const { toggle } = this.props;\n        return (\n        <Modal isOpen={true} toggle={toggle} className=\"modal-player-window\">\n            <ModalHeader toggle={toggle}> Player Search </ModalHeader>\n            <ModalBody className=\"modal-search-body\">\n                <Form>\n                    <FormGroup>\n                        <Label for=\"search-bar\">Search: </Label>\n                        <Input\n                            type=\"text\"\n                            autoComplete=\"off\"\n                            name=\"search-bar\"\n                            onKeyUp={this.handleChange}\n                            placeholder=\"Enter Player Name\"\n                        />\n                    </FormGroup>\n                </Form>\n            <div>{this.state.renderList}</div>\n            </ModalBody>\n            <ModalFooter>\n                {this.makePlayerArea()}\n            </ModalFooter>\n        </Modal>\n        );\n    }\n}","import {\n    DropdownMenu,\n    DropdownItem,\n    DropdownToggle,\n    UncontrolledButtonDropdown\n} from \"reactstrap\";\n\nconst pageTitleBar = (props) => {\n    return (\n        <div className=\"title-group\">\n            <div className=\"title site-title\">\n                <h1>[XSAF] Camelot Dynamic Campaign</h1>\n            </div>\n            <div className=\"title site-title\">\n                <UncontrolledButtonDropdown>\n                    <DropdownToggle caret size=\"lg\">\n                        <strong>Server: {props.dataSet}</strong>\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem header>Choose Server...</DropdownItem>\n                        <DropdownItem disabled onClick={() => props.togglePappa(\"Papa\")}>Papa</DropdownItem>\n                        <DropdownItem onClick={() => props.toggleSierra(\"Sierra\")}>Sierra</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem onClick={() => props.toggleAlpha(\"Alpha\")}>Alpha</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledButtonDropdown>\n            </div>\n        </div>\n    )\n}\n\nexport default pageTitleBar;","import {\n    Card,\n    CardBody,\n    Col,\n    Row,\n} from \"reactstrap\";\n\nconst makeFlightData = (props) => {\n    let pname = \"\"\n    let pdict = {}\n    const ret = [];\n    props.dataDump.forEach((entry, _) => {\n        if (entry[\"f_time_s\"] > 7000){\n            pname = entry[\"name\"];\n            pdict = entry;  \n            ret.push(\n                <Card>\n                    <CardBody>\n                        <h3 className=\"card-title\">{pname}</h3>\n                        <h5 className=\"card-sub-title mb-2 text-muted\">Flight Time: {pdict[\"SeatTime\"]}</h5>\n                        <div className=\"card-section\">\n                            <Row className=\"row-cols-3\">\n                                <Col className=\"stat\">\n                                    <span><b>Air Kills: </b>{pdict[\"Air Kills\"]}</span>\n                                </Col>\n                                <Col className=\"stat\">\n                                    <span><b>Deaths: </b>{pdict[\"Deaths\"]}</span>\n                                </Col>\n                                <Col className=\"stat\">\n                                    <span><b>Kill/Death Ratio: </b>{pdict[\"KtoDr\"].toFixed(2)}</span>\n                                </Col>\n                                <Col className=\"stat\">\n                                    <span><b>Ground Kills: </b>{pdict[\"Unit Kills\"]}</span>\n                                </Col>\n                                <Col className=\"stat\">\n                                    <span><b>Building Kills: </b>{pdict[\"Building Kills\"]}</span>\n                                </Col>\n                                <Col className=\"stat\">  \n                                    <span><b>Ejections: </b>{pdict[\"Ejections\"]}</span>\n                                </Col>\n                            </Row>\n                        </div>\n                    </CardBody>\n                </Card>\n            )\n        }    \n    })\n    return ret\n}\n\nexport default makeFlightData;","import { ResponsiveBubble } from '@nivo/circle-packing';\n\nconst myResponsiveBubbleHtml = (props) => {\n    const d = props.data\n    return (\n        <ResponsiveBubble\n            root={d}\n            margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n            identity=\"name\"\n            value=\"amt\"\n            colors={{ scheme: props.chartCircleColors }}\n            colorBy={props.chartCircleColorBy}\n            padding={6}\n            labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1 ] ] }}\n            borderWidth={2}\n            borderColor={{ from: 'color' }}\n            defs={[\n                {\n                    id: 'lines',\n                    type: 'patternDots',\n                    background: 'none',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 5,\n                    spacing: 8\n                }\n            ]}\n            fill={ props.chartCircleLines ? [ { match: { depth: 1 }, id: 'lines' } ] : []}\n            animate={true}\n            motionStiffness={80}\n            motionDamping={12}\n        />\n    )\n}\n\nexport default myResponsiveBubbleHtml;","import { Component } from 'react';\nimport {\n    Col,\n    Container,\n    Row,\n} from \"reactstrap\";\nimport PlayerSearchModal from \"../modals/SearchModal\";\nimport Papa_Dump from '../../data/Papa_Export.json';\nimport Sierra_Dump from '../../data/Sierra_Export.json';\nimport Alpha_Dump from '../../data/Alpha_Export.json';\n\nimport FlightData from '../../components/flightdata/FlightData';\nimport MyResponsiveBubble from '../../components/nivo/respbubble/MyResponsiveBubble';\n\n// Color schemes for graph\nconst colorSchemes = {\n    \"blue\": \"blues\",\n    \"red\": \"reds\",\n    \"fuel\": \"blues\"\n}\n\nconst data_sources = {\n    \"Alpha\": Alpha_Dump,\n    \"Papa\": Papa_Dump,\n    \"Sierra\": Sierra_Dump\n}\n\nexport default class MainDisplay extends Component {\n    state = {\n        searchModal: false,\n        playerDump: {},\n        dataSet: \"Alpha\",\n        dataDump: [], //players\n        fuelDataJSON: {},\n        mainDataChart: {\n            name: \"xsaf\", \n            children: []\n        },\n        chartCircleColorBy: \"depth\", //depth or name\n        chartCircleLines: true,\n        chartCircleColors: colorSchemes[\"blue\"],\n        chartMotionDamp: 2,\n        nivoFuel: {\n            \"name\": \"xsaf\",\n            \"children\": \n                [ \n                    /* Populate dynamic with data */\n                ]\n            }\n    }\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n    }\n\n    shouldComponentUpdate(nextState, nextProps){\n        if (nextState !== this.state){\n            return true;\n        }\n    }\n\n    componentDidMount() {\n        this.setState({dataSet: this.props.dataSet})\n        this.digest(this.props.dataSet);\n        this.giveBlueBaseStrength(this.props.dataSet);\n    }\n\n    // Formats player data for makeFlightData()\n    digest = (type) => {\n        const data = data_sources[type].PlayerScores\n        let formatted = [];\n        Object.keys(data).forEach((key) => {\n            formatted.push({name: key, ...data[key]})\n        })\n        this.setState({dataDump: formatted});\n    }\n\n    // Formats and sets as default Base Strength in the Nivo Bubblegraph\n    giveBlueBaseStrength = (type) => {\n        const data = data_sources[type];\n        const baseDict = data[\"BaseData\"][\"blueCoalition\"][\"baseData\"];\n        const formatedBaseList = [];\n        Object.keys(baseDict).forEach((key) => {\n            console.log(key);\n            let unitList = [];\n            let unorderedUnitList = baseDict[key][\"type\"]\n            Object.keys(unorderedUnitList).forEach( (key) =>{\n                unitList.push({\n                    name: key,\n                    amt: unorderedUnitList[key]\n                })\n            } )\n            \n            formatedBaseList.push({\n                name: key,\n                amt: baseDict[key][\"str\"],\n                children: unitList\n            })\n        })\n        console.log(formatedBaseList);\n        let replacement = {\n            \"name\": \"xsaf\",\n                \"children\": formatedBaseList\n                }\n        this.setState({\n                chartMotionDamp: 2,\n                mainDataChart: replacement, \n                chartCircleColorBy: \"name\", \n                chartCircleLines: true, \n                chartCircleColors: colorSchemes[\"blue\"]\n            })\n    }\n\n    giveBaseFuel = () => {\n        const data = data_sources[this.state.dataSet]\n        const baseDict = data[\"BaseData\"][\"blueCoalition\"][\"baseData\"]\n        let replacement = {\n            name: \"xsaf\", \n            children: []\n        };\n        Object.keys(baseDict).forEach((key) => {\n            console.log(key);\n            console.log(baseDict[key].bFuel.amount);\n            replacement[\"children\"].push( \n                {\n                    name: key,\n                    amt:  baseDict[key].bFuel.amount,\n                }\n            )\n        });\n        this.setState({\n            chartMotionDamp: 30,\n            mainDataChart: replacement, \n            chartCircleColorBy: \"name\", \n            chartCircleLines: false,\n            charCircleColors: colorSchemes[\"fuel\"]\n        })\n    }\n\n    orderByKills = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Air Kills\"] - a[\"Air Kills\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByKDR = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"KtoDr\"] - a[\"KtoDr\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByDeaths = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Deaths\"] - a[\"Deaths\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByTime = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"f_time_s\"] - a[\"f_time_s\"]\n        })\n        this.setState({dataDump: temp})\n    }\n    \n    render() {\n            return (\n                <div className=\"custom-container opac-window\">\n                    <Row>\n                        <Col md=\"6\">\n                            <div className=\"title col-title opac-window-text\">\n                                <h3>Airfield Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.giveBlueBaseStrength(this.state.dataSet)}>Blue Strength</button>\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.giveBaseFuel(this.state.dataSet)}>Blue Fuel</button>\n                            </div>\n                            <Container className=\"first\">\n                                <MyResponsiveBubble\n                                    data={this.state.mainDataChart}\n                                    chartCircleColors={this.state.chartCircleColors}\n                                    chartCircleColorBy={this.state.chartCircleColorBy}\n                                    chartCircleLines={this.state.chartCircleLines}\n                                />\n                            </Container>\n                        </Col>\n                        <Col md=\"6\">\n                            <div className=\"title col-title opac-window-text\">\n                                <h3>Player Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                {/*<button className=\"my-btn btn btn-primary\" onClick={() => this.digest(Papa_Dump.PlayerScores)}>Refresh Data</button>*/}\n                                <button className=\"my-btn btn btn-primary\" onClick={() => this.orderByKDR()}>Kill/Death</button>\n                                <button className=\"my-btn btn btn-success\" onClick={() => this.orderByKills()}>Kills</button>\n                                <button className=\"my-btn btn btn-danger\" onClick={() => this.orderByDeaths()}>Deaths</button>\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.orderByTime()}>Time</button>\n                                <button class=\"my-btn btn btn-secondary\" onClick={() => this.toggle()}>Search</button>\n                            </div>\n                            <div className=\"nexttest player-data scroll-test\">\n                                <FlightData dataDump={this.state.dataDump} />\n                            </div>\n                        </Col>\n                    </Row>\n                    \n                    {this.state.modal ? (\n                        <PlayerSearchModal\n                            searchList={this.state.dataDump}\n                            toggle={this.toggle}\n                            onSave={this.handleSubmit}\n                            />\n                        ) : null}\n                </div>\n            )\n    }\n}","import { Component } from \"react\";\nimport {\n    Col,\n    Container,\n    Row,\n} from \"reactstrap\";\nimport PlayerSearchModal from \"./containers/modals/SearchModal\";\nimport Papa_Dump from './data/Papa_Export.json';\nimport Sierra_Dump from './data/Sierra_Export.json';\nimport Alpha_Dump from './data/Alpha_Export.json';\n\nimport TitleBar from './components/titlebar/TitleBar';\nimport FlightData from './components/flightdata/FlightData';\nimport MyResponsiveBubble from './components/nivo/respbubble/MyResponsiveBubble';\nimport MainDisplay from './containers/maindisplay/MainDisplay';\n\n// Color schemes for graph\nconst colorSchemes = {\n    \"blue\": \"blues\",\n    \"red\": \"reds\",\n    \"fuel\": \"blues\"\n}\n\nconst data_sources = {\n    \"Alpha\": Alpha_Dump,\n    \"Papa\": Papa_Dump,\n    \"Sierra\": Sierra_Dump\n}\n\nclass App extends Component {\n    \n    constructor(props) {\n        super(props)\n        this.state = {\n            searchModal: false,\n            dataSet: \"Alpha\",\n            playerDump: {},\n            dataDump: [], //players\n            fuelDataJSON: {},\n            mainDataChart: {\n                name: \"xsaf\", \n                children: []\n            },\n            chartCircleColorBy: \"depth\", //depth or name\n            chartCircleLines: true,\n            chartCircleColors: colorSchemes[\"blue\"],\n            chartMotionDamp: 2,\n            nivoFuel: {\n                \"name\": \"xsaf\",\n                \"children\": \n                    [ \n                        /* Populate dynamic with data */\n                    ]\n                }\n        }\n    }\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n    }\n\n    componentDidMount() {\n        this.digest(this.state.dataSet);\n        this.giveBlueBaseStrength(this.state.dataSet);\n    }\n\n    // Formats player data for makeFlightData()\n    digest = (type) => {\n        const data = data_sources[type].PlayerScores\n        let formatted = [];\n        Object.keys(data).forEach((key) => {\n            formatted.push({name: key, ...data[key]})\n        })\n        this.setState({dataDump: formatted});\n    }\n\n    // Formats and sets as default Base Strength in the Nivo Bubblegraph\n    giveBlueBaseStrength = (type) => {\n        const data = data_sources[type];\n        const baseDict = data[\"BaseData\"][\"blueCoalition\"][\"baseData\"];\n        const formatedBaseList = [];\n        Object.keys(baseDict).forEach((key) => {\n            console.log(key);\n            let unitList = [];\n            let unorderedUnitList = baseDict[key][\"type\"]\n            Object.keys(unorderedUnitList).forEach( (key) =>{\n                unitList.push({\n                    name: key,\n                    amt: unorderedUnitList[key]\n                })\n            } )\n            \n            formatedBaseList.push({\n                name: key,\n                amt: baseDict[key][\"str\"],\n                children: unitList\n            })\n        })\n        console.log(formatedBaseList);\n        let replacement = {\n            \"name\": \"xsaf\",\n                \"children\": formatedBaseList\n                }\n        this.setState({\n                chartMotionDamp: 2,\n                mainDataChart: replacement, \n                chartCircleColorBy: \"name\", \n                chartCircleLines: true, \n                chartCircleColors: colorSchemes[\"blue\"]\n            })\n    }\n\n    giveBaseFuel = () => {\n        const data = data_sources[this.state.dataSet]\n        const baseDict = data[\"BaseData\"][\"blueCoalition\"][\"baseData\"]\n        let replacement = {\n            name: \"xsaf\", \n            children: []\n        };\n        Object.keys(baseDict).forEach((key) => {\n            console.log(key);\n            console.log(baseDict[key].bFuel.amount);\n            replacement[\"children\"].push( \n                {\n                    name: key,\n                    amt:  baseDict[key].bFuel.amount,\n                }\n            )\n        });\n        this.setState({\n            chartMotionDamp: 30,\n            mainDataChart: replacement, \n            chartCircleColorBy: \"name\", \n            chartCircleLines: false,\n            charCircleColors: colorSchemes[\"fuel\"]\n        })\n    }\n\n    orderByKills = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Air Kills\"] - a[\"Air Kills\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByKDR = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"KtoDr\"] - a[\"KtoDr\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByDeaths = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Deaths\"] - a[\"Deaths\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByTime = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"f_time_s\"] - a[\"f_time_s\"]\n        })\n        this.setState({dataDump: temp})\n    }\n    \n    toggleDataTypes = (type) => {\n        this.setState({dataSet: type})\n        this.digest(type);\n        this.giveBlueBaseStrength(type);\n    }\n\n    render = () => {\n        return (\n            <main className=\"content\">\n                <TitleBar \n                    dataSet={this.state.dataSet}\n                    togglePappa={this.toggleDataTypes.bind(this)}\n                    toggleSierra={this.toggleDataTypes.bind(this)}\n                    toggleAlpha={this.toggleDataTypes.bind(this)}\n                />\n                {/** \n                 * Works but does not animate graph due to only updating props not state of container.\n                <MainDisplay\n                    key={this.state.dataSet}\n                    dataSet={this.state.dataSet}\n                    />\n                **/\n                }\n                <div className=\"custom-container opac-window\">\n                    <Row>\n                        <Col md=\"6\">\n                            <div className=\"title col-title opac-window-text\">\n                                <h3>Airfield Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.giveBlueBaseStrength(this.state.dataSet)}>Blue Strength</button>\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.giveBaseFuel(this.state.dataSet)}>Blue Fuel</button>\n                            </div>\n                            <Container className=\"first\">\n                                <MyResponsiveBubble\n                                    data={this.state.mainDataChart}\n                                    chartCircleColors={this.state.chartCircleColors}\n                                    chartCircleColorBy={this.state.chartCircleColorBy}\n                                    chartCircleLines={this.state.chartCircleLines}\n                                />\n                            </Container>\n                        </Col>\n                        <Col md=\"6\">\n                            <div className=\"title col-title opac-window-text\">\n                                <h3>Player Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                \n                                <button className=\"my-btn btn btn-primary\" onClick={() => this.orderByKDR()}>Kill/Death</button>\n                                <button className=\"my-btn btn btn-success\" onClick={() => this.orderByKills()}>Kills</button>\n                                <button className=\"my-btn btn btn-danger\" onClick={() => this.orderByDeaths()}>Deaths</button>\n                                <button className=\"my-btn btn btn-info\" onClick={() => this.orderByTime()}>Time</button>\n                                <button class=\"my-btn btn btn-secondary\" onClick={() => this.toggle()}>Search</button>\n                            </div>\n                            <div className=\"nexttest player-data scroll-test\">\n                                <FlightData dataDump={this.state.dataDump} />\n                            </div>\n                        </Col>\n                    </Row>\n                    \n                    {this.state.modal ? (\n                        <PlayerSearchModal\n                            searchList={this.state.dataDump}\n                            toggle={this.toggle}\n                            onSave={this.handleSubmit}\n                            />\n                        ) : null}\n                </div>\n            </main>\n                    \n        )\n    }\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport App from './app.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//\n//                       _oo0oo_\n//                      o8888888o\n//                      88\" . \"88\n//                      (| -_- |)\n//                      0\\  =  /0\n//                    ___/`---'\\___\n//                  .' \\\\|     |// '.\n//                 / \\\\|||  :  |||// \\\n//                / _||||| -:- |||||- \\\n//               |   | \\\\\\  -  /// |   |\n//               | \\_|  ''\\---/''  |_/ |\n//               \\  .-\\__  '-'  ___/-. /\n//             ___'. .'  /--.--\\  `. .'___\n//          .\"\" '<  `.___\\_<|>_/___.' >' \"\".\n//         | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |\n//         \\  \\ `_.   \\_ __\\ /__ _/   .-` /  /\n//     =====`-.____`.___ \\_____/___.-`___.-'=====\n//                       `=---='\n//\n//\n//     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//                  ????         ????\n//"],"sourceRoot":""}