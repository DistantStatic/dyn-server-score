[{"/home/distant/projects_new/learning/src/index.js":"1","/home/distant/projects_new/learning/src/app.js":"2","/home/distant/projects_new/learning/src/searchModal.js":"3"},{"size":1084,"mtime":1609906633147,"results":"4","hashOfConfig":"5"},{"size":12348,"mtime":1609907524487,"results":"6","hashOfConfig":"5"},{"size":5398,"mtime":1609813832566,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zko260",{"filePath":"10","messages":"11","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/distant/projects_new/learning/src/index.js",[],"/home/distant/projects_new/learning/src/app.js",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37"],"/home/distant/projects_new/learning/src/searchModal.js",["38","39"],"import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\nimport * as JsSearch from 'js-search';\n\nexport default class PlayerSearchModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        searchList: this.props.searchList,\n        searchTerm: \"\",\n        resultList: [],\n        renderList: [],\n        search: new JsSearch.Search('name'),\n        activePlayer: {},\n        activeElement: {},\n        };\n        this.state.search.addIndex(\"name\")\n        this.state.search.addDocuments(this.state.searchList)\n    }\n\n    handleChange = (e) => {\n        let { name, value } = e.target;\n        this.setState({searchTerm: value});\n        this.searchThings(value)\n    };\n\n    searchThings = (a) => {\n        let result = this.state.search.search(a)\n        console.log(result);\n        this.setState({resultList: result, renderList: this.handleResults(result)})\n    }\n\n    playerSelect = (e) => {\n        console.log(e.target.id)\n        let test = e.target.id.valueOf()\n        e.target.className = (e.target.className.includes(\"selected\")) ? \"my-centered-text search-results-item\" : ( \"selected \" + e.target.className );\n        this.setState({activePlayer: this.state.resultList[test], activeElement: e})\n    }\n\n    handleResults = (response) => {\n        let flag = typeof(response)\n        let temp = [];\n        if (flag === \"object\"){\n            if (Array.isArray(flag)){\n                console.log(\"ARRAY???\")\n            } else {\n                console.log(\"dict\")\n                temp.push(\n                    <div className=\"modal-results-list\">\n                        {\n                            Object.keys(response).map((key, entry) => {\n                                return (\n                                    <p id={\"\" + key} onClick={(e) => this.playerSelect(e)} className=\"my-centered-text search-results-item\">{response[entry][\"name\"]}</p>\n                                )\n                            })\n                        }\n                    </div>\n                )\n            }\n        }\n        return temp\n    }\n\n    isEmpty = (obj) => {\n        if (typeof obj === \"undefined\"){\n            return true\n        }\n        return Object.keys(obj).length === 0;\n    }\n\n    makePlayerArea = () => {\n        if (!this.isEmpty(this.state.activePlayer)){\n            let pname = this.state.activePlayer[\"name\"]\n            let pdict = this.state.activePlayer\n            return (\n                <div className=\"selected-player-area\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h3 className=\"card-title\">{pname}</h3>\n                            <h5 className=\"card-sub-title mb-2 text-muted\">Flight Time: {pdict[\"SeatTime\"]}</h5>\n                            <div className=\"card-section\">\n                                <div className=\"row row-cols-3\">\n                                    <div className=\"col stat\">\n                                        <span><b>Air Kills: </b>{pdict[\"Air Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Deaths: </b>{pdict[\"Deaths\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">   \n                                        <span><b>Kill/Death Ratio: </b>{pdict[\"KtoDr\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Ground Kills: </b>{pdict[\"Unit Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Building Kills: </b>{pdict[\"Building Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Ejections: </b>{pdict[\"Ejections\"]}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    }\n\n    render() {\n        const { toggle } = this.props;\n        return (\n        <Modal isOpen={true} toggle={toggle} className=\"modal-player-window\">\n            <ModalHeader toggle={toggle}> Player Search </ModalHeader>\n            <ModalBody className=\"modal-search-body\">\n                <Form>\n                    <FormGroup>\n                        <Label for=\"search-bar\">Search: </Label>\n                        <Input\n                            type=\"text\"\n                            autoComplete=\"off\"\n                            name=\"search-bar\"\n                            onKeyUp={this.handleChange}\n                            placeholder=\"Enter Player Name\"\n                        />\n                    </FormGroup>\n                </Form>\n            <div>{this.state.renderList}</div>\n            </ModalBody>\n            <ModalFooter>\n                {this.makePlayerArea()}\n            </ModalFooter>\n        </Modal>\n        );\n    }\n}",{"ruleId":"40","severity":1,"message":"41","line":2,"column":9,"nodeType":"42","messageId":"43","endLine":2,"endColumn":15},{"ruleId":"40","severity":1,"message":"44","line":2,"column":17,"nodeType":"42","messageId":"43","endLine":2,"endColumn":22},{"ruleId":"40","severity":1,"message":"45","line":2,"column":24,"nodeType":"42","messageId":"43","endLine":2,"endColumn":29},{"ruleId":"40","severity":1,"message":"46","line":2,"column":31,"nodeType":"42","messageId":"43","endLine":2,"endColumn":50},{"ruleId":"40","severity":1,"message":"47","line":2,"column":52,"nodeType":"42","messageId":"43","endLine":2,"endColumn":59},{"ruleId":"40","severity":1,"message":"48","line":2,"column":61,"nodeType":"42","messageId":"43","endLine":2,"endColumn":73},{"ruleId":"40","severity":1,"message":"49","line":2,"column":75,"nodeType":"42","messageId":"43","endLine":2,"endColumn":88},{"ruleId":"40","severity":1,"message":"50","line":2,"column":90,"nodeType":"42","messageId":"43","endLine":2,"endColumn":100},{"ruleId":"40","severity":1,"message":"51","line":2,"column":102,"nodeType":"42","messageId":"43","endLine":2,"endColumn":112},{"ruleId":"40","severity":1,"message":"52","line":2,"column":114,"nodeType":"42","messageId":"43","endLine":2,"endColumn":125},{"ruleId":"40","severity":1,"message":"53","line":2,"column":127,"nodeType":"42","messageId":"43","endLine":2,"endColumn":146},{"ruleId":"40","severity":1,"message":"54","line":2,"column":148,"nodeType":"42","messageId":"43","endLine":2,"endColumn":165},{"ruleId":"40","severity":1,"message":"55","line":2,"column":167,"nodeType":"42","messageId":"43","endLine":2,"endColumn":180},{"ruleId":"40","severity":1,"message":"56","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":12},{"ruleId":"40","severity":1,"message":"57","line":6,"column":8,"nodeType":"42","messageId":"43","endLine":6,"endColumn":13},{"ruleId":"40","severity":1,"message":"58","line":8,"column":10,"nodeType":"42","messageId":"43","endLine":8,"endColumn":16},{"ruleId":"40","severity":1,"message":"59","line":11,"column":7,"nodeType":"42","messageId":"43","endLine":11,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":57,"column":41,"nodeType":"62","messageId":"63","endLine":57,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":66,"column":49,"nodeType":"62","messageId":"63","endLine":66,"endColumn":51},{"ruleId":"60","severity":1,"message":"61","line":71,"column":61,"nodeType":"62","messageId":"63","endLine":71,"endColumn":63},{"ruleId":"60","severity":1,"message":"64","line":105,"column":35,"nodeType":"65","messageId":"63","endLine":105,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":127,"column":41,"nodeType":"62","messageId":"63","endLine":127,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":135,"column":41,"nodeType":"62","messageId":"63","endLine":135,"endColumn":43},{"ruleId":"40","severity":1,"message":"58","line":3,"column":5,"nodeType":"42","messageId":"43","endLine":3,"endColumn":11},{"ruleId":"40","severity":1,"message":"66","line":32,"column":15,"nodeType":"42","messageId":"43","endLine":32,"endColumn":19},"no-unused-vars","'XYPlot' is defined but never used.","Identifier","unusedVar","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'HorizontalGridLines' is defined but never used.","'Treemap' is defined but never used.","'HexbinSeries' is defined but never used.","'HeatmapSeries' is defined but never used.","'MarkSeries' is defined but never used.","'LineSeries' is defined but never used.","'LabelSeries' is defined but never used.","'HorizontalBarSeries' is defined but never used.","'VerticalBarSeries' is defined but never used.","'PolygonSeries' is defined but never used.","'test' is defined but never used.","'pdump' is defined but never used.","'Button' is defined but never used.","'dataaa' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from function.","FunctionExpression","'name' is assigned a value but never used."]