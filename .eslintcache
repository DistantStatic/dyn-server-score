[{"/home/distant/projects_new/learning/src/index.js":"1","/home/distant/projects_new/learning/src/dynamic.js":"2","/home/distant/projects_new/learning/src/app.js":"3"},{"size":269,"mtime":1609719264657,"results":"4","hashOfConfig":"5"},{"size":10908,"mtime":1609746190237,"results":"6","hashOfConfig":"5"},{"size":1581,"mtime":1609724578467,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zko260",{"filePath":"10","messages":"11","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/distant/projects_new/learning/src/index.js",[],"/home/distant/projects_new/learning/src/dynamic.js",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36"],"import React, { Component } from \"react\";\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines, Treemap, HexbinSeries, HeatmapSeries, MarkSeries, LineSeries, LabelSeries, HorizontalBarSeries, VerticalBarSeries, PolygonSeries} from 'react-vis';\nimport { ResponsiveBubble } from '@nivo/circle-packing'\nimport test from \"./test.json\" \nimport dump from \"./dump.json\"\nimport pdump from \"./dump_player.json\"\nimport sdump from \"./dump_skynet.json\"\n\nconst dataaa = { \"asdf\": 1234};\nconst dynadata = { \"Al Qusayr\" :{\"amt\":67.304099121099,\"co\":0,\"fc\":\"000000006E24ED00\",\"id\":2,\"v\":false}, \"Aleppo\" :{\"amt\":513.549,\"co\":0,\"fc\":\"0000000DF582FF50\",\"id\":23,\"v\":false},\"Bassel Al-Assad\":{\"amt\":786.18481982422,\"co\":0,\"fc\":\"0000000DF5812270\",\"id\":17,\"v\":false},\"Hama\":{\"amt\":765.55572253418,\"co\":0,\"fc\":\"000000006E273010\",\"id\":10,\"v\":false},\"Hatay\":{\"amt\":72.886288574219,\"co\":0,\"fc\":\"000000006E2663B0\",\"id\":11,\"v\":false},\"Incirlik\":{\"amt\":569.508,\"co\":0,\"fc\":\"000000006E2685C0\",\"id\":12,\"v\":false},\"Jirah\":{\"amt\":100,\"co\":0,\"fc\":\"0000000DF58188A0\",\"id\":13,\"v\":false},\"Minakh\":{\"amt\":25,\"co\":0,\"fc\":\"0000000DF5836580\",\"id\":22,\"v\":false}}\n\nclass App extends Component {\n    \n    constructor(props) {\n        super()\n        this.state = {\n            playerDump: {},\n            dataDump: [],\n            skynetDump: {},\n            fuelDataJSON: {},\n            fuelDataChart: [{\"x\": \"asdf\", \"y\": 1234}],\n            baseCount: 0,\n            nivoFuel: {\n                \"name\": \"nivo\",\n                \"color\": \"hsl(27, 70%, 50%)\",\n                \"children\": \n                    [ \n                        /* Populate dynamic with data */\n                    ]\n                }\n        }\n    }\n\n    digest = (d) => {\n        let formatted = [];\n        Object.keys(d).map((key, index) => {\n            formatted.push({name: key, ...d[key]})\n        })\n        this.setState({dataDump: formatted});\n    }\n\n    giveBlueBaseStrength = (a) => {\n        let baseDict = a[\"bspaceData\"][\"blue\"][\"base\"];\n        let formatBaseList = [];\n        Object.keys(baseDict).map( (key, index) => {\n            let unitList = [];\n            let unordersUnitList = baseDict[key][\"types\"]\n            console.log(\"Inside Map\")\n            console.log(unordersUnitList)\n            Object.keys(unordersUnitList).map( (key, index) =>{\n                unitList.push({\n                    name: key,\n                    amt: unordersUnitList[key]\n                })\n            } )\n            \n            formatBaseList.push({\n                name: key,\n                amt: baseDict[key][\"str\"],\n                children: unitList\n            })\n        })\n        let replacement = {\n            \"name\": \"nivo\",\n                \"color\": \"hsl(27, 70%, 50%)\",\n                \"children\": formatBaseList\n                }\n        this.setState({fuelDataChart: replacement})\n    }\n\n    giveBaseFuel = () => {\n        let d = {name: \"XSAF\", color:\"hsl(27, 70%, 50%)\", children: []};\n        let count = 0;\n        Object.keys(dynadata).map(function(key, index) {\n            d[\"children\"].push( \n                {\n                    name: key,\n                    color: \"hsl(84, 70%, 50%)\",\n                    amt:  dynadata[key].amt,\n                }\n            )\n            count += 1;\n        });\n        this.setState({BaseCount: count});\n        this.setState({fuelDataChart: d})\n    }\n\n    digestSkynet = (d) => {\n        let formatted = [];\n        Object.keys(d).map((key, index) => {\n            formatted.push({name: key, ...d[key]})\n        })\n        this.setState({skynetDump: formatted});\n    }\n    \n    digestBases = (d) => {\n        let formatted = [];\n        Object.keys(d).map((key, index) => {\n            formatted.push({name: key, ...d[key]})\n        })\n        this.setState({skynetDump: formatted});\n    }\n\n    orderByKills = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Air Kills\"] - a[\"Air Kills\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByKDR = () => {\n        let temp = this.state.dataDump\n        console.log(\"LOOK OVER HERE\")\n        console.log(temp);\n        temp.forEach((entry, index) =>{\n            if (temp[index][\"KtoDr\"] > 1) {\n                console.log(\"theres data\");\n            }\n        })\n        temp.sort((a, b) => {\n            return b[\"KtoDr\"] - a[\"KtoDr\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByDeaths = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"Deaths\"] - a[\"Deaths\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    orderByTime = () => {\n        let temp = this.state.dataDump\n        temp.sort((a, b) => {\n            return b[\"f_time_s\"] - a[\"f_time_s\"]\n        })\n        this.setState({dataDump: temp})\n    }\n\n    parseMeData = () => {\n        this.setState({fuelDataJSON: dynadata});\n        \n    }\n\n    makeFlightData = () => {\n        let pname = \"\"\n        let pdict = {}\n        let ret = [];\n        this.state.dataDump.forEach((entry, index) => {\n            if (entry[\"f_time_s\"] > 7000){\n                pname = entry[\"name\"];\n                pdict = entry;  \n                ret.push(\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h3 className=\"card-title\">{pname}</h3>\n                            <h5 className=\"card-sub-title mb-2 text-muted\">Flight Time: {pdict[\"SeatTime\"]}</h5>\n                            <div className=\"card-section\">\n                                <div className=\"row row-cols-3\">\n                                    <div className=\"col stat\">\n                                        <span><b>Air Kills: </b>{pdict[\"Air Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Deaths: </b>{pdict[\"Deaths\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">   \n                                        <span><b>Kill/Death Ratio: </b>{pdict[\"KtoDr\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">\n                                        <span><b>Ground Kills: </b>{pdict[\"Unit Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Building Kills: </b>{pdict[\"Building Kills\"]}</span>\n                                    </div>\n                                    <div className=\"col stat\">  \n                                        <span><b>Ejections: </b>{pdict[\"Ejections\"]}</span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )\n            }    \n        })\n        return ret\n    }\n\n    MyResponsiveBubbleHtml = (d) => (\n        <ResponsiveBubble\n            root={d}\n            margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n            identity=\"name\"\n            value=\"amt\"\n            colors={{ scheme: 'set2' }}\n            colorBy=\"depth\"\n            padding={6}\n            labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1 ] ] }}\n            borderWidth={2}\n            borderColor={{ from: 'color' }}\n            defs={[\n                {\n                    id: 'lines',\n                    type: 'patternLines',\n                    background: 'none',\n                    color: 'inherit',\n                    rotation: -45,\n                    lineWidth: 5,\n                    spacing: 8\n                }\n            ]}\n            animate={true}\n            motionStiffness={90}\n            motionDamping={12}\n        />\n    )\n\n    pageTitleBar = () => {\n        return (\n            <div className=\"title-group\">\n                <div className=\"title site-title\">\n                    <h1>[XSAF] Camelot Dynamic Server</h1>\n                </div>\n                <div className=\"title site-title\">\n                    <h1>Server Data</h1>\n                </div>\n            </div>\n        )\n    }\n\n    TitleBar = () => {\n        return (\n            <div className=\"title-group\">\n                <div className=\"title site-title\">\n                    <h1>[XSAF] Camelot Dynamic Server</h1>\n                </div>\n                <div className=\"title site-title\">\n                    <h1>Server Data</h1>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount = () => {\n        this.giveBlueBaseStrength(sdump);\n        this.digest(dump);\n        this.digestSkynet(sdump);\n    }\n\n    render() {\n        return (\n            <main className=\"content\">\n                {this.pageTitleBar()}\n                <div className=\"custom-container\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <div className=\"title col-title\">\n                                <h3>Airfield Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                <button className=\"btn btn-info\" onClick={() => this.giveBlueBaseStrength(sdump)}>Base Strength</button>\n                                <button className=\"btn btn-info\" onClick={() => this.giveBaseFuel()}>Base Fuel</button>\n                            </div>\n                            <div className=\"first\">\n                                {this.MyResponsiveBubbleHtml(this.state.fuelDataChart)}\n                            </div>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"title col-title\">\n                                <h3>Player Data</h3>\n                            </div>\n                            <div className=\"btn-mygroup\">\n                                <button className=\"btn btn-primary\" onClick={() => this.digest(dump)}>Refresh Data</button>\n                                <button className=\"btn btn-info\" onClick={() => this.orderByKDR()}>Kill/Death</button>\n                                <button className=\"btn btn-success\" onClick={() => this.orderByKills()}>Kills</button>\n                                <button className=\"btn btn-danger\" onClick={() => this.orderByDeaths()}>Deaths</button>\n                                <button className=\"btn btn-info\" onClick={() => this.orderByTime()}>Time</button>\n                            </div>\n                            <div className=\"nexttest player-data\">\n                                {this.makeFlightData()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n        )\n    }\n}\nexport default App","/home/distant/projects_new/learning/src/app.js",["37"],{"ruleId":"38","severity":1,"message":"39","line":2,"column":9,"nodeType":"40","messageId":"41","endLine":2,"endColumn":15},{"ruleId":"38","severity":1,"message":"42","line":2,"column":17,"nodeType":"40","messageId":"41","endLine":2,"endColumn":22},{"ruleId":"38","severity":1,"message":"43","line":2,"column":24,"nodeType":"40","messageId":"41","endLine":2,"endColumn":29},{"ruleId":"38","severity":1,"message":"44","line":2,"column":31,"nodeType":"40","messageId":"41","endLine":2,"endColumn":50},{"ruleId":"38","severity":1,"message":"45","line":2,"column":52,"nodeType":"40","messageId":"41","endLine":2,"endColumn":59},{"ruleId":"38","severity":1,"message":"46","line":2,"column":61,"nodeType":"40","messageId":"41","endLine":2,"endColumn":73},{"ruleId":"38","severity":1,"message":"47","line":2,"column":75,"nodeType":"40","messageId":"41","endLine":2,"endColumn":88},{"ruleId":"38","severity":1,"message":"48","line":2,"column":90,"nodeType":"40","messageId":"41","endLine":2,"endColumn":100},{"ruleId":"38","severity":1,"message":"49","line":2,"column":102,"nodeType":"40","messageId":"41","endLine":2,"endColumn":112},{"ruleId":"38","severity":1,"message":"50","line":2,"column":114,"nodeType":"40","messageId":"41","endLine":2,"endColumn":125},{"ruleId":"38","severity":1,"message":"51","line":2,"column":127,"nodeType":"40","messageId":"41","endLine":2,"endColumn":146},{"ruleId":"38","severity":1,"message":"52","line":2,"column":148,"nodeType":"40","messageId":"41","endLine":2,"endColumn":165},{"ruleId":"38","severity":1,"message":"53","line":2,"column":167,"nodeType":"40","messageId":"41","endLine":2,"endColumn":180},{"ruleId":"38","severity":1,"message":"54","line":4,"column":8,"nodeType":"40","messageId":"41","endLine":4,"endColumn":12},{"ruleId":"38","severity":1,"message":"55","line":6,"column":8,"nodeType":"40","messageId":"41","endLine":6,"endColumn":13},{"ruleId":"38","severity":1,"message":"56","line":9,"column":7,"nodeType":"40","messageId":"41","endLine":9,"endColumn":13},{"ruleId":"57","severity":1,"message":"58","line":36,"column":41,"nodeType":"59","messageId":"60","endLine":36,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":45,"column":49,"nodeType":"59","messageId":"60","endLine":45,"endColumn":51},{"ruleId":"57","severity":1,"message":"58","line":50,"column":61,"nodeType":"59","messageId":"60","endLine":50,"endColumn":63},{"ruleId":"57","severity":1,"message":"61","line":74,"column":35,"nodeType":"62","messageId":"60","endLine":74,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":90,"column":41,"nodeType":"59","messageId":"60","endLine":90,"endColumn":43},{"ruleId":"57","severity":1,"message":"58","line":98,"column":41,"nodeType":"59","messageId":"60","endLine":98,"endColumn":43},{"ruleId":"38","severity":1,"message":"63","line":3,"column":10,"nodeType":"40","messageId":"41","endLine":3,"endColumn":26},"no-unused-vars","'XYPlot' is defined but never used.","Identifier","unusedVar","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'HorizontalGridLines' is defined but never used.","'Treemap' is defined but never used.","'HexbinSeries' is defined but never used.","'HeatmapSeries' is defined but never used.","'MarkSeries' is defined but never used.","'LineSeries' is defined but never used.","'LabelSeries' is defined but never used.","'HorizontalBarSeries' is defined but never used.","'VerticalBarSeries' is defined but never used.","'PolygonSeries' is defined but never used.","'test' is defined but never used.","'pdump' is defined but never used.","'dataaa' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a return value from function.","FunctionExpression","'ResponsiveBubble' is defined but never used."]